// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// Auth.js 5.0 標準モデル
// ==========================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  client        Client?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Device {
  id         String   @id @default(cuid())
  deviceId   String   @unique           // アプリ初回起動で生成したUUIDを保存
  clientId   String?
  client     Client?    @relation(fields: [clientId], references: [id], onDelete: Cascade)

  platform   String?
  appVersion String?
  osVersion  String?
  pushToken  String?

  lastSeenAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 関連
  readings   Reading[]
  chatMessages ChatMessage[]

  @@index([clientId])
  @@index([lastSeenAt])
}

model Client {
  id            String    @id @default(cuid())
  userId        String?   @unique
  user          User?     @relation(fields: [userId], references: [id])
  name          String?
  email         String?   @unique
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // ソフトデリート
  deletedAt     DateTime?

  // プラン情報
  planId               String
  plan                 Plan     @relation(fields: [planId], references: [id])

  // 利用状況
  dailyReadingsCount Int      @default(0)
  lastReadingDate    DateTime?
  dailyCelticsCount  Int      @default(0)
  lastCelticReadingDate DateTime?
  dailyPersonalCount   Int      @default(0)
  lastPersonalReadingDate     DateTime?

  // デバイス情報（ゲストユーザー用）
  devices Device[]

  // ユーザー状態
  isRegistered Boolean  @default(false)
  provider     String?  // "google", "apple" 何でサインインしたか
  lastLoginAt  DateTime?

  // お気に入りスプレッド
  favoriteSpreads FavoriteSpread[]

  // 関連
  readings Reading[]
  planChangeHistories PlanChangeHistory[]
  chatMessages ChatMessage[]
  dailyResetHistories DailyResetHistory[]

  @@index([email])
  @@index([planId])
}

model DailyResetHistory {
  id        String   @id @default(cuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  date      DateTime
  resetType String   // "PLAN_CHANGE", "USAGE_CHECK" など

  beforeReadingsCount      Int  @default(0)
  afterReadingsCount       Int  @default(0)
  beforeCelticsCount       Int  @default(0)
  afterCelticsCount        Int  @default(0)
  beforePersonalCount      Int  @default(0)
  afterPersonalCount       Int  @default(0)

  createdAt DateTime @default(now())

  @@index([clientId, date])
}
// ==========================================
// タロットデッキモデル
// ==========================================

model TarotDeck {
  id          String      @id @default(cuid())
  name        String
  version     String
  purpose     String
  totalCards  Int
  sources     String[]
  optimizedFor String
  primaryFocus String
  categories  String[]
  status      String
  language    String    @default("en")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cards       TarotCard[]

  @@unique([name, language])  // 同じ名前でも言語が異なれば複数存在可
}

// タロットカードモデル
model TarotCard {
  id                String        @id @default(cuid())
  no                Int           // カード番号 (1-78)
  code              String        // "0_Fool", "1_Magician", "2_HighPriestess", ..., "77_KingOfPentacles"
  name              String
  type              String        // major, minor
  number            Int
  suit              String?
  element           String?
  zodiac            String?
  uprightKeywords   String[]      // 配列を直接保存
  reversedKeywords  String[]      // 配列を直接保存
  promptContext     String        @db.Text
  language          String        @default("en")
  deckId            String
  deck              TarotDeck     @relation(fields: [deckId], references: [id])
  meanings          CardMeaning[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // 関連
  readings         DrawnCard[]
  
  @@unique([code, language])  // 同じコードでも言語が異なれば複数存在可
}

// カードの意味モデル
model CardMeaning {
  id          String    @id @default(cuid())
  category    String    // love, career, money, health
  upright     String    @db.Text
  reversed    String    @db.Text
  cardId      String
  card        TarotCard @relation(fields: [cardId], references: [id])
  language    String    @default("en")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([cardId, category, language])
}

// ==========================================
// スプレッド関連モデル
// ==========================================

// スプレッドレベルマスター
model SpreadLevel {
  id          String    @id @default(cuid())
  code        String    @unique  // "BEGINNER", "MEDIUM", "ADVANCED", "EXPERT"
  name        String    // "初心者", "中級者", "上級者", "最上級"
  description String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  spreads     Spread[]
}

// スプレッドモデル
model Spread {
  id          String       @id @default(cuid())
  code        String       @unique  // "CROSS", "CelticCross", "ThreeCard", "Horseshoe"など
  name        String
  category    String       // 簡易表示用のカテゴリ名
  levelId     String
  level       SpreadLevel  @relation(fields: [levelId], references: [id])
  planId      String
  plan        Plan         @relation(fields: [planId], references: [id])
  guide       String?      @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // 関連
  cells       SpreadCell[]
  categories  SpreadToCategory[]
  reading Reading[]
  favoriteSpreads FavoriteSpread[]
}

// スプレッドのセルモデル
model SpreadCell {
  id        String   @id @default(cuid())
  x         Int
  y         Int
  vLabel    String?
  hLabel    String?
  vOrder    Int?
  hOrder    Int?
  spread    Spread?   @relation(fields: [spreadId], references: [id])
  spreadId  String
}

// カテゴリモデル
model ReadingCategory {
  id          String                @id @default(cuid())
  name        String                @unique // 表示名: 総合、恋愛、仕事など
  description String                // カテゴリの説明（オプション）
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // 関連
  spreads     SpreadToCategory[]
  reading Reading[]
}

// スプレッドとカテゴリの中間テーブル
model SpreadToCategory {
  id           String          @id @default(cuid())
  spreadId     String
  categoryId   String
  spread       Spread        @relation(fields: [spreadId], references: [id])
  category     ReadingCategory @relation(fields: [categoryId], references: [id])
  
  @@unique([spreadId, categoryId])
}

// ==========================================
// プラン関連モデル
// ==========================================

// プランモデル
model Plan {
  id          String    @id @default(cuid())
  no          Int       @unique @default(autoincrement())  // 並び順
  code        String    @unique  // "GUEST", "FREE", "STANDARD", "PREMIUM"
  name        String    // "ゲスト", "フリー", "スタンダード", "プレミアム"
  description String   @db.Text
  price       Int       @default(0)  // 月額価格または1回あたりの価格
  isActive    Boolean   @default(true)
  features    String[]  // 含まれる機能の配列
  maxReadings Int       @default(0) // 1ヶ月の最大リーディング回数
  maxCeltics  Int       @default(0) // 1ヶ月の最大ケルト十字リーディング回数
  maxPersonal Int       @default(0) // 1ヶ月の最大パーソナル占い回数
  hasPersonal Boolean   @default(false)  // パーソナル占い機能の有無
  hasHistory  Boolean   @default(false)  // 履歴保存機能の有無
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 関連
  clients     Client[]
  spreads     Spread[]  // このプランで利用可能なスプレッド
  fromPlanChangeHistories PlanChangeHistory[] @relation("FromPlan")
  toPlanChangeHistories   PlanChangeHistory[] @relation("ToPlan")
}

// ==========================================
// 履歴・お気に入り関連モデル
// ==========================================

// プラン履歴モデル
model PlanChangeHistory {
  id          String    @id @default(cuid())
  clientId    String
  client      Client    @relation(fields: [clientId], references: [id])
  fromPlanId  String
  fromPlan    Plan      @relation("FromPlan", fields: [fromPlanId], references: [id])
  toPlanId    String
  toPlan      Plan      @relation("ToPlan", fields: [toPlanId], references: [id])
  reason      String?   // "UPGRADE", "DOWNGRADE", "EXPIRE", "CANCEL"など
  note        String?   @db.Text
  changedAt   DateTime  @default(now())
}

// タロット占い師モデル
model Tarotist {
  id          String    @id @default(cuid())
  name        String    // 占い師の名前 default: Ariadne
  bio         String    @db.Text
  avatarUrl   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // 関連
  readings    Reading[]
  chatMessages ChatMessage[]
}

// リーディングモデル
model Reading {
  id            String    @id @default(cuid())
  clientId      String?
  client        Client?     @relation(fields: [clientId], references: [id])
  deviceId      String
  device        Device    @relation(fields: [deviceId], references: [id])
  tarotistId    String
  tarotist      Tarotist  @relation(fields: [tarotistId], references: [id])
  spreadId      String
  spread        Spread    @relation(fields: [spreadId], references: [id])
  categoryId    String
  category      ReadingCategory @relation(fields: [categoryId], references: [id])
  cards         DrawnCard[]  // 選択されたカード配列
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 関連
  chatMessages  ChatMessage[]
}

// リーディングで引いたカードモデル
model DrawnCard {
  id        String   @id @default(cuid())
  readingId String
  reading   Reading  @relation(fields: [readingId], references: [id])
  cardId    String
  card      TarotCard @relation(fields: [cardId], references: [id])
  x Int
  y Int
  isReversed Boolean
  order     Int      // 引いた順番
  createdAt DateTime @default(now())
}

// チャットタイプ
enum ChatType {
  CARD_INTERPRETATION
  USER_RESPONSE
  FINAL_READING
  USER_QUESTION
  TAROTIST_ANSWER
}

// チャットロール
enum ChatRole {
  USER
  TAROTIST
}

// チャットメッセージモデル - カード解釈・質問応答の履歴
model ChatMessage {
  id        String   @id @default(cuid())
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  deviceId  String
  device    Device   @relation(fields: [deviceId], references: [id])
  tarotistId String
  tarotist   Tarotist @relation(fields: [tarotistId], references: [id])
  chatType   ChatType
  readingId  String
  reading    Reading  @relation(fields: [readingId], references: [id])
  role       ChatRole   // "user" or "tarotist""
  message    String   @db.Text
  createdAt  DateTime @default(now())
}

// お気に入りスプレッドモデル
model FavoriteSpread {
  id        String   @id @default(cuid())
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  spreadId  String
  spread    Spread   @relation(fields: [spreadId], references: [id])
  createdAt DateTime @default(now())
  @@unique([clientId, spreadId])
}