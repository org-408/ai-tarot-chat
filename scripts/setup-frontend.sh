#!/bin/sh

GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

set -e

rm -rf web

# setup nextjs with tailwindcss and shadcn/ui
npx shadcn@latest init -y

cd web

BASE_DIR=$(pwd)

# shadcn setup
npx shadcn@latest add -y badge button card input scroll-area select separator table textarea

# .env.local setup
echo -e "${BLUE} Update .env.local ...${NC}"
cat >> .env.local << 'EOF'
# OAuth settings (Ariadne settings)
GOOGLE_CLIENT_ID=490676045957-66v5r7l550b796l4hjjto7hcor1d07ml.apps.googleusercontent.com
GOOGLE_CLIENT_SECRET=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
GOOGLE_CLIENT_CALLBACK=/auth/callback/google
GITHUB_CLIENT_ID=Ov23liwVikVXpVdQMGJM
GITHUB_CLIENT_SECRET=3004974909f7659fcb580f2013b26e47ba3b4cf0
GITHUB_CLIENT_CALLBACK=/auth/callback/github

# Session settings
# keys are default comment out because auto generated by secrets function
# SECRET_KEY="9v4OJd6xtfk77Q1UXvdBAY4Zk6KRsXREDfa+KuVQ5pk="
# JWT_SECRET_KEY="9v4OJd6xtfk77Q1UXvdBAY4Zk6KRsXREDfa+KuVQ5pk="
JWT_ALGORITHM=RS256
JWT_PRIVATE_KEY_PATH="app/keys/private_key.pem"
JWT_PUBLIC_KEY_PATH="app/keys/public_key.pem"
ACCESS_TOKEN_EXPIRE_MINUTES=60
REFRESH_TOKEN_EXPIRE_DAYS=7
IDENTITY_EXPIRE_DAYS=30

# frontend settings
FRONTEND_HOST=http://localhost:3000
# FRONTEND_HOST=https://example.com

# backend settings
# CALLBACK_HOST=http://localhost:8000
# CALLBACK_HOST=https://api.example.com

# database settings
DATABASE_URL=postgresql+asyncpg://ariadne:nhf99VbZBfbrUpTH@localhost:5432/ariadne
# TEST_DATABASE_URL=postgresql+asyncpg://test:test@localhost:5433/test

# AI API keys
OPENAI_API_KEY=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
ANTHROPIC_API_KEY=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
EOF

# react-icons setup
echo -e "${BLUE} Install react-icons ...${NC}"
npm install react-icons

# prisma setup
echo -e "${BLUE} Install prisma ...${NC}"
npm install @prisma/client @auth/prisma-adapter
npm install prisma --save-dev
npx prisma init

# .env setup
echo -e "${BLUE} Overwrite .env ...${NC}"
cat > .env << 'EOF'
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL="postgresql://ariadne:nhf99VbZBfbrUpTH@localhost:5432/ariadne?schema=public"
EOF

# prisma/schema.prisma setup
echo -e "${BLUE} Overwrite prisma/schema.prisma ...${NC}"
cat > prisma/schema.prisma << 'EOF'
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}
EOF

# prisma.ts setup
echo -e "${BLUE} Generate prisma.ts ...${NC}"
cat > prisma.ts << 'EOF'
import { PrismaClient } from "@prisma/client";

const globalForPrisma = globalThis as unknown as { prisma: PrismaClient };

export const prisma = globalForPrisma.prisma || new PrismaClient();

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;
EOF

# package.json setup
echo -e "${BLUE} Overwrite package.json ...${NC}"
cat > package.json << 'EOF'
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "ui:add": "npx shadcn@canary add",
    "db:migrate": "npx prisma migrate dev",
    "db:reset": "npx prisma migrate reset --force",
    "db:reset+": "npx prisma migrate reset --force && npx prisma migrate dev",
    "db:generate": "npx prisma generate --no-engine",
    "db:push": "npx prisma db push",
    "db:studio": "npx prisma studio"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.8.0",
    "@prisma/client": "^6.5.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.487.0",
    "next": "15.2.4",
    "next-auth": "^5.0.0-beta.25",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-icons": "^5.5.0",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.2.0",
    "tw-animate-css": "^1.2.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "prisma": "^6.5.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
EOF

# prisma migrate & generate
echo -e "${BLUE} Migrate & generate prisma client ...${NC}"
npm run db:migrate
npm run db:generate
